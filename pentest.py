from tkinter import *
from tkinter import ttk
from tkinter import font

from tkinter import scrolledtext
from tkinter import messagebox
import subprocess
import http.server
import socketserver
import socket
import platform
from time import strftime
import phonenumbers 
from phonenumbers import geocoder,timezone
from phonenumbers import carrier
from PIL import Image
from PIL.ExifTags import TAGS
import logging
from urllib.parse import urljoin
import requests
from bs4 import BeautifulSoup
from pyngrok import ngrok
import dns 
import dns.resolver
import pyshorteners
import thedraculaserver
import os
from tkinter import filedialog as fd
from tkinter.filedialog import asksaveasfile




pentester = Tk()
pentester.geometry("900x900")
pentester.title("DRACULA PENTEST FRAMEWORK")
pentester["background"]= '#728FCE'
myfont= font.Font(family="Times", weight="bold", size = 20, slant="roman")
font2= font.Font(family ="Terminal", size=11 )
font3 = font.Font(family="Times", size=12, slant="italic")
homepage = Frame(pentester)

radiobtn_variable = StringVar()
global osint_panel
global m 
global aboutdracula
global PORT
global port
global result
global url
def osint():
    homepage.place_forget()
    global osint_panel
    m1c = '#00ee00'
    bgc = '#222222'
    dbg = '#000000'
    fgc = '#111111'
    osint_panel = Frame(pentester, width=1368, height=900 ,bg="#D3D3D3")
    menubar = Menu(osint_panel) 
    #Filemenu
    file = Menu(menubar, tearoff = 1) 
    menubar.add_cascade(label ='OSINT', menu = file) 
    file.add_command(label ='Phonenumbers Scan', command = numbers) 
    file.add_command(label ='PingTest', command = ping) 
    file.add_command(label ='WebCrawler', command = None)
    file.add_command(label = 'Find IP', command= url) 
    file.add_command(label = "CLI G-search", command=search)
    file.add_command(label = 'Exif Data',command= exif_data)
    file.add_separator() 
    file.add_command(label ='Exit', command = osint_panel.destroy) 
        #Editmenu 
    edit = Menu(menubar, tearoff = 1) 
    menubar.add_cascade(label ='Analyze', menu = edit) 
    edit.add_command(label ='Packets', command = None) 
    edit.add_command(label ='Intercept', command = intercept) 
    edit.add_command(label ='GPS Location Search', command = location) 
    edit.add_command(label ='Raw HTML', command = raw_html) 
    edit.add_separator() 
    edit.add_command(label ='Download WebFiles', command = Download) 
    edit.add_command(label ='Scan PORTS', command = portscanner)
    edit.add_command(label = "MX RECORDS", command= mx)

    
    port_forward = Menu(menubar, tearoff = 1) 
    menubar.add_cascade(label ='Servers', menu = port_forward) 
    port_forward.add_command(label ='Start Server', command = open_server) 
    port_forward.add_command(label ='Stop Server', command = None) 
    port_forward.add_command(label ='Ngrok', command = portforward) 
    port_forward.add_separator() 
        
    #Helpmenu
    help_ = Menu(menubar, tearoff = 1) 
    menubar.add_cascade(label ='Help', menu = help_) 
    help_.add_command(label ='Dracula OSINT', command = None) 
    help_.add_command(label ='Upgrade', command = None) 
    help_.add_separator() 
    help_.add_command(label ='About Dracula', command =about_dracula)
    
    global entry
    global error_scrolled_text
    global errorlog
    global num
    global logs_scrolled_text
    global img
    global info_dict
    global ip_ad
    global ping_test_entry
    
    
    


    
    pentester.config(menu=menubar)
    entry = StringVar()
    ip_ad = StringVar()
    num = StringVar()
    img = StringVar()

    logs_scrolled_text = scrolledtext.ScrolledText(osint_panel, width=59, height=36 , fg="#008000", bg="#838B83")
    logs_scrolled_text.place(x=800, y=150)
    error_scrolled_text = scrolledtext.ScrolledText(osint_panel, width=90, height=15 , fg="#008000", bg="#CDC8B1")
    error_scrolled_text.place(x=40, y=508)
    clearlogs_btn= Button(osint_panel, text = "ClearLogs", fg= "black", bg="white" ,  command =clearlog)
    clearlogs_btn.place(x=40 , y = 475)
    save_btn= Button(osint_panel, text = "Save", fg= "black", bg="white" ,command=save)
    save_btn.place(x=1000 , y = 115)
    cancel_btn= Button(osint_panel , text = "CancelServices", fg= "black", bg="white")
    cancel_btn.place(x=1057 , y =115)
    exit_btn= Button(osint_panel, text = "CloseDracula", fg= "black", bg="white", command= closeDracula)
    exit_btn.place(x=1180 , y = 115)
    phone_number = Label(osint_panel , text= "PhoneNumber Scan Area", bg= '#728FCE')
    phone_number.place(x=235, y=115)
    ping_test = Label(osint_panel, text= "PingTest" , bg= '#728FCE')
    ping_test.place(x=450, y= 115)
    ip_address = Label(osint_panel, text= "INPUT URL" , bg="#728FCE")
    ip_address.place(x=620, y=115)
    phone_number_entry = Entry(osint_panel , textvariable=num, bg= '#CDC8B1')
    phone_number_entry.place(x=235, y=150)
    ping_test_entry = Entry(osint_panel, textvariable=entry, bg= '#CDC8B1')
    ping_test_entry.place(x=450, y=150)
    ip_address_entry = Entry(osint_panel, textvariable=ip_ad, bg= '#CDC8B1')
    ip_address_entry.place(x=620, y=150)
    errorlog = scrolledtext.ScrolledText(osint_panel, width=50, height=10 , fg="red", )
    errorlog.place(x=40 , y= 250)

    options = [ "PNG",
                "JPEG",
                "JPG"
                 ]
    clicked = StringVar()
    clicked.set("PNG")
    exif_label = Label(osint_panel, text="EXIF ANALYSIS AREA: \n CHOOSE (jpeg)", bg="#728fce")
    exif_label.place(x=5, y=115)
    drop = OptionMenu( osint_panel, clicked , *options )
    drop.place(x=5, y=155)
    exif_label = Label(osint_panel, text="Paste Image Dir", bg="#CDC8B1")
    exif_label.place(x=5, y=190)
    exif_entry = Entry(osint_panel, textvariable=img,bg="#CDC8B1", width=20)
    exif_entry.place(x=5, y=220)

    x = platform.system()
    errorlog.insert(END, "Checking System..............\n")
    errorlog.insert(END, x)
    


    osint_panel.place(anchor='c', rely=0.5, relx=0.5)
def url():
    dom = ip_ad.get()
    ping_test_entry.insert(END,(socket.gethostbyname(dom)))
    error_scrolled_text.insert(END, "IP ADDRESS:", "\n")
    error_scrolled_text.insert(END , (socket.gethostbyname(dom)))
    error_scrolled_text.insert(END, "\n")



def ping():
    cmd = ["ping", entry.get(), "-c", "10"]
    output = subprocess.check_output(cmd) #output = subprocess.check_output("ping {} -c 2".format(entry.get()), shell=True)
    errorlog.insert(END,"Checking For Errors!!!!..............")
    print('>', output)# put result in label
    error_scrolled_text.insert(END,"Processing...................","\n")
    error_scrolled_text.insert(INSERT,"\n")
    error_scrolled_text.insert(END,output ,"\n")
    error_scrolled_text.insert(END,"\n")
def numbers():
    numbers = num.get()
    global phonenumbers 
    global ch_number 
    ch_number = phonenumbers.parse(numbers, "CH")
    print(geocoder.description_for_number(ch_number, "en"))
    global service_provider
    service_provider = phonenumbers.parse(numbers, "RO")
    print(carrier.name_for_number(service_provider, "en"))
    logs_scrolled_text.insert(END ,"Processing Results..............." ,"\n")
    logs_scrolled_text.insert(INSERT,"\n")
    logs_scrolled_text.insert(END ,(geocoder.description_for_number(ch_number, "en")) )
    logs_scrolled_text.insert(INSERT,"\n")
    logs_scrolled_text.insert(END , (carrier.name_for_number(service_provider, "en")),"\n")
    logs_scrolled_text.insert(END, "\n")
def intercept():
    intercept_panel = Frame(pentester, width = 800 , height= 500 , bg="grey")
        #Editmenu 

    close_packets = Button(intercept_panel , text="Close",  bg="blue",command= None)
    close_packets.place(x=10, y=450)
    exit_btn = Button(intercept_panel, text= "Exit", bg="blue", command=intercept_panel.destroy)
    exit_btn.place(x=700, y=450)
    interceptd= scrolledtext.ScrolledText(intercept_panel , width= 50, height= 25 )
    interceptd.place(x=320, y=20)

    intercept_panel.place(anchor = 'c', rely=0.5, relx=0.5)
def clearlog():
    logs_scrolled_text.delete(1.0, END) 
    error_scrolled_text.delete(1.0, END)
    entry.set("")
    num.set("")
    ip_ad.set("")
    img.set("")
def portforward():
    url = ngrok.connect(8080).public_url
    print(url)
    logs_scrolled_text.insert(END, "GENERATING NGROK LINK>>>>", "\n")
    logs_scrolled_text.insert(END, "\n")
    logs_scrolled_text.insert(END, url)
    logs_scrolled_text(END, "\n")
def grok():
    url = ngrok.connect(80).public_url
    spam_scrolledtext.insert(INSERT, "\n")
    spam_scrolledtext.insert(INSERT, "GENERATING NGROK LINK AT PORT:", portgrok.get)
    spam_scrolledtext.insert(INSERT, "\n")
    spam_scrolledtext.insert(INSERT, url)
    spam_scrolledtext.insert(INSERT, "\n")
def location():
    messagebox.askquestion("Warning", "Make sure Your Server and Port Foward has been turned on", icon='warning')
    logs_scrolled_text.insert(INSERT, url ,"\drive.html")
    

import sys
import subprocess 
from datetime import datetime 

def portscanner():


    # Ask for input
    remoteServer    = ip_ad.get()
    remoteServerIP  = socket.gethostbyname(remoteServer)

    # Print a nice banner with information on which host we are about to scan
    print ("-" * 60)
    logs_scrolled_text.insert(INSERT, "-" *59, "\n")
    logs_scrolled_text.insert(INSERT, " Dracule Port Scanner:Please wait, Scanning remote host", remoteServerIP,"\n")
    logs_scrolled_text.insert(INSERT, "-" *59, "\n")
    print ("Please wait, scanning remote host", remoteServerIP)
    logs_scrolled_text.insert(END, "\n")
    logs_scrolled_text.insert(END, "\n")


    print ("-" * 60)

    # Check what time the scan started
    t1 = datetime.now()

    # Using the range function to specify ports (here it will scans all ports between 1 and 1024)

    # We also put in some error handling for catching errors

    try:
        for port in range(1,1025):  
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex((remoteServerIP, port))
            if result == 0:
                print ("Port {}: 	 Open".format(port))
                logs_scrolled_text.insert(INSERT, "Port {}: 	 Open".format(port), "\n")

            sock.close()

    except KeyboardInterrupt:
        print ("You pressed Ctrl+C")
        logs_scrolled_text.insert(INSERT, "You pressed Ctrl+c", "\n")
        sys.exit()

    except socket.gaierror:
        print ('Hostname could not be resolved. Exiting')
        logs_scrolled_text.insert(INSERT, "Hostname could not be resolved.", "\n")
        logs_scrolled_text.insert(INSERT,  "\n")
        
        sys.exit()

    except socket.error:
        print ("Couldn't connect to server")
        logs_scrolled_text.insert(INSERT, "Couldn't connect to server","\n")
        logs_scrolled_text.insert(INSERT, "\n")
        sys.exit()

    # Checking the time again
    t2 = datetime.now()

    # Calculates the difference of time, to see how long it took to run the script
    total =  t2 - t1

    # Printing the information to screen
    print ('Scanning Completed in: ', total)
    logs_scrolled_text.insert(END, "Scanning Completed in :",total, "\n")

from tkinter.filedialog import asksaveasfile
def save():
    file= asksaveasfile(initialfile = 'Untitled.html',
    defaultextension=".html",filetypes=[("All Files","*.*"),("Text Documents","*.html")])
    filedata = str(logs_scrolled_text.get(1.0, END))
    file.write(filedata)
    file.close()
def select_image():
    filetypes = (
        ("image/jpg", "*.jpg"),
        ("image/png", "*.png"),
        ("file/pdf", "*.pdf"),
        ("file/docx", "*docx")
    )
    file = fd.askopenfilename(title="Open a file", initialdir="/", filetypes=filetypes)
    image_pic_var.set(f'{file}')




def Cracking():
    homepage.place_forget()
    cracking_panel = Frame(pentester,  width= 900,height=900)
    cracking_panel.place(anchor='c', rely=0.5, relx=0.5)
def Attacks():
    homepage.place_forget()
    attacks_panel = Frame(pentester, width =900, height=900)
    attacks_panel.place(anchor='c', rely=0.5, relx=0.5)
def Spamming():
    homepage.place_forget()
    global spamming_panel
    spamming_panel = Frame(pentester, width= 1368, height=900)

    dashboard_bar = Menu(spamming_panel)
    global portgrok
    global spam_scrolledtext
    global emails_scrolledtext
    global console_scrolledtext
    

    portgrok = IntVar()
    portgrok.set("Default port is 80")

     #Filemenu
    dash = Menu(dashboard_bar, tearoff = 1) 
    dashboard_bar.add_cascade(label ='SMTP', menu = dash) 
    dash.add_command(label ='Start SMTP Server', command = None) 
    dash.add_command(label ='Mass Mailer', command = None) 
    dash.add_command(label ='SMS Mailer', command = None)
    dash.add_command(label = "Send Mail", command = None)
    dash.add_command(label = 'Stop SMTP', command= None) 
    dash.add_command(label = "Start Tor", command=None)
    dash.add_command(label = 'Start Proxy Server',command= None)
    dash.add_separator() 
    dash.add_command(label ='Exit', command = exit_panel)
    dash.add_command(label="Close Dracula", command=closespam) 
        #Editmenu 
    spamboard = Menu(dashboard_bar, tearoff = 1) 
    dashboard_bar.add_cascade(label ='Phishing Attack', menu = spamboard) 
    spamboard.add_command(label ='Start Phishing Page', command = None) 
    spamboard.add_command(label ='PortForward Link ', command = None) 
    spamboard.add_command(label ='Harvest Passwords', command = None) 
    spamboard.add_command(label ='QR Code Generator', command = None) 
    spamboard.add_separator() 
    spamboard.add_command(label ='Clone Page', command = None) 
    spamboard.add_command(label ='Hijack Cookies', command = None)
    spamboard.add_command(label = "Analyse ", command= None)

    
    cheat = Menu(dashboard_bar, tearoff = 1) 
    dashboard_bar.add_cascade(label ='Servers', menu = cheat) 
    cheat.add_command(label ='Start Server', command = open_server) 
    cheat.add_command(label ='Stop Server', command = None) 
    cheat.add_command(label ='Ngrok', command = grok) 
    cheat.add_separator() 
        
    #Helpmenu
    leader = Menu(dashboard_bar, tearoff = 1) 
    dashboard_bar.add_cascade(label ='Help', menu = leader)
    leader.add_command(label ='Dracula Spamming', command = None) 
    leader.add_command(label ='Upgrade', command = None)
    leader.add_command(label= "Clear Logs", command=None) 
    leader.add_separator() 
    leader.add_command(label ='About Dracula', command =None)

    pentester.config(menu=dashboard_bar)
     
    

    spam_scrolledtext = scrolledtext.ScrolledText(spamming_panel, width=93, height=20 , bg="#1A1A1A" , fg="green" )
    spam_scrolledtext.place(x=600, y=116)
    console_scrolledtext = scrolledtext.ScrolledText(spamming_panel, width=93, height=15, bg="#8B8970", fg="#00688B")
    console_scrolledtext.place(x=600, y=500)
    consolebtn = Button(spamming_panel, text="Console" , font= font3 ,fg="#0000FF" )
    consolebtn.place(x=600 , y=468)
    clearbtn = Button(spamming_panel, text="ClearLogs" , font= font3 ,fg="#0000FF"  , command=clearlogs)
    clearbtn.place(x=700 , y=468)
    attachment = Entry(spamming_panel, )
    composelabl = Label(spamming_panel, text="Compose MAIL/ SMS Here!! & Sender Email", font=font3, fg="#0000FF")
    composelabl.place(x=250, y=150)
    compose_mail= Text(spamming_panel, width= 40, height=15)
    compose_mail.place(x=250, y=200)
    spamming_panel.place(anchor= 'c', rely=0.5, relx=0.5)
    select_port_entry =ttk.Combobox(spamming_panel ,textvariable= portgrok,width =20,font=font3 )
    
    select_port_entry['values'] = ("80",
                                   "8080",
                                   "5000",
                                   "21")
    select_port_entry.grid(column =1, row=5 )
    select_port_entry.place(x=20, y=180)
    port_label= Label(spamming_panel, text="SELECT PORT:DEFAULT 80" , font=font3)
    port_label.place(x=20 , y=150)
    sheild = ttk.Label(spamming_panel, text="Sheild Package" , font=font3)
    sheild.place(x=20, y=205)
    treview = ttk.Treeview(spamming_panel)
    treview.place(x=20, y=220)
        # Inserting items to the treeview
    # Inserting parent
    treview.insert('', '0', 'item1',
                    text ='Sender Authentication')
    
    # Inserting child
    treview.insert('', '1', 'item2',
                    text ='Ip Sheild')
    treview.insert('', '2', 'item3',
                    text ='API Keys')
    treview.insert('', 'end', 'item4',
                    text ='Google SMTP')
    
    # Inserting more than one attribute of an item
    treview.insert('item2', 'end', 'Proxy-Chain',
                    text ='Privoxy') 
    treview.insert('item2', 'end', 'SMTP Authentication',
                    text ='SSL & TLS')
    treview.insert('item3', 'end', 'Settings',
                    text ='Server Settings') 
    treview.insert('item3', 'end', 'Send Attachment',
                    text ='Attachments')
    treview.insert('item4', 'end', 'Other',
                    text ='DMARCK Verification')
    treview.insert('item4', 'end', 'Java',
                    text ='DKIM signing')
    
    # Placing each child items in parent widget
    treview.move('item2', 'item1', 'end') 
    treview.move('item3', 'item1', 'end')
    treview.move('item4', 'item1', 'end')
    global email_var
    email_var =StringVar()
    email_var.set("Sender Email:example@email.com")
    sendEmail= Entry(spamming_panel, textvariable=email_var ,fg="grey", font=font3 , width=30)
    sendEmail.place(x=250, y=170)
    global image_pic_var
    image_pic_var = StringVar()
    image_pic_var.set("Click on button to add attachment")
    item_image_label = Label(spamming_panel, text="Email Attachment ", font=font3)
    item_image_label.place(x=250, y=510)
    image_pic = Entry(spamming_panel,  font=font3, fg="gray", textvariable=image_pic_var, width=30)
    image_pic.place(x=250, y=530)
    add_button = Button(spamming_panel, text="Add Attachment", font=font3, bg="skyblue", fg="white", command=select_image)
    add_button.place(x=250, y=550)
    w = Label(spamming_panel, text ='Number Of Mails', font = font3) 
    w.place(x=250,y=460)
    
    sp = Spinbox(spamming_panel, from_= 0, to = 500, font=font3)
    sp.place(x=250, y=480)

    l= Label(spamming_panel, text ='Mark As :', font = font3) 
    l.place(x=250,y=580)
    
    Checkbutton1 = IntVar()  
    Checkbutton2 = IntVar()  
    Checkbutton3 = IntVar()
    
    Button1 = Checkbutton(spamming_panel, text = "Important", 
                        variable = Checkbutton1,
                        onvalue = 1,
                        offvalue = 0,
                        height = 2,
                        font=font3,
                        width = 10)
    
    Button2 = Checkbutton(spamming_panel, text = "Promotional",
                        variable = Checkbutton2,
                        onvalue = 1,
                        offvalue = 0,
                        height = 2,
                        font=font3,
                        width = 10)
    
    Button3 = Checkbutton(spamming_panel, text = "Primary",
                        variable = Checkbutton3,
                        onvalue = 1,
                        offvalue = 0,
                        height = 2,
                        font=font3,
                        width = 10)  
        
    Button1.place(x=250, y=610)  
    Button2.place(x=258, y=640)
    Button3.place(x=245, y=670)
    global entry_mail
    entry_mail=StringVar()
    entry_mail.set("Type Target Mails Here")
    emails_scrolledtext = scrolledtext.ScrolledText(spamming_panel, height=12, width=25 , font=font3, bg="grey")
    emails_scrolledtext.place(x=20, y=450)
    email_label= Label(emails_scrolledtext, text=" Mass Mails/Carriers Display  ", font=font3, bg='skyblue' )
    emails_scrolledtext.window_create("end", window=email_label)
    email_entry = Entry(spamming_panel, textvariable=entry_mail, fg="grey", font=font3 , width=25)
    email_entry.place(x=20, y=660)
    addbtn= Button(spamming_panel, text="Add Email/Phone No.", fg="black", font=font3, bg="blue" ,command=insert_mail)
    addbtn.place(x=20, y=690)

def insert_mail():
    addmail = entry_mail.get()
    emails_scrolledtext.insert(INSERT, "\n")
    emails_scrolledtext.insert(INSERT, addmail, "\n")
def clearlogs():
    emails_scrolledtext.delete(1.0, END)
    email_label= Label(emails_scrolledtext, text=" Mass Mails/Carriers Display  ", font=font3, bg='skyblue' )
    emails_scrolledtext.window_create("end", window=email_label)
    spam_scrolledtext.delete(1.0,END)
    console_scrolledtext.delete(1.0, END)
    


    

import requests
from bs4 import BeautifulSoup

def raw_html():
 
    URL = ip_ad.get()
    r = requests.get(URL)
    
    soup = BeautifulSoup(r.content, 'html5lib') # If this line causes an error, run 'pip install html5lib' or install html5lib
    print(soup.prettify())
    logs_scrolled_text.insert(INSERT,soup.prettify(), "\n")
    logs_scrolled_text.insert(END, "\n")
def exit_panel():
     exitd = messagebox.askyesno( "Warning","Are You sure you want to Exit", icon= "warning")
     if exitd:
         spamming_panel.destroy()
    
    
import requests
def Download():
    remote_url = ip_ad.get()
    # Define the local filename to save data
    local_file = 'local_copy.txt'
    # Make http request for remote file data
    data = requests.get(remote_url)
    # Save file data to local copy
    with open(local_file, 'wb')as file:
        file.write(data.content)
    logs_scrolled_text.insert(INSERT, "Saved As local_copy.txt")

def check():
    global on_click 
    on_click = radiobtn_variable.get()
    if on_click == "Attacks":
        Attacks()
    elif on_click == "Cracking":
        Cracking()
    elif on_click == "OSINT":
        osint()
    elif on_click == "Spamming":
        Spamming()
global image
global info_dict

def closespam():
    answer = messagebox.askyesno("Warning","Are you sure You want to Close This Tool !", icon="warning")
    if answer:
        pentester.destroy()
    




def exif_data():
    imagename = img.get()
    image = Image.open(imagename)
    exifdata = image.getexif()
    for tagid in exifdata:
        tagname = TAGS.get(tagid,tagid)
        value = exifdata.get(tagid)
        print(f"{tagname:25}: {value}")
        logs_scrolled_text.insert(END,"\n")
        logs_scrolled_text.insert(INSERT,f"{tagname:30}","\n")
        logs_scrolled_text.insert(INSERT,f"{value}")
def closeDracula():
    closed= messagebox.askyesno("Warning","Are You Sure You want to Exit Dracula Framework , Your Data Might be lost,", icon="warning")
    if closed:
        pentester.destroy()
    
def about_dracula():
    aboutdracula = Frame(pentester,width=800, height= 500 )
    m = 0
    welcome_label1= Label(aboutdracula , text="WELCOME TO DRACULA FRAMEWORK TOOL",font= myfont)
    welcome_label1.place(x=120, y=5)
    about_label = Label(aboutdracula , text = """ Dracula Framework is a Hacking & Penetration Testing Tool. \n Dracula Framwork is a tool that makes it easier for penetration testers and beginners to freely interract with it. \n The tool gives a  graphical user interaction \n to make it easier for  carrying out attacks and OSINT in one major \nframework without having to switch on to different tools for better results.\n This tool is carefully designed to make it easier for users to get results in any penetration testing project \n. With Python alone and any kind of operating systems that can allow python running in it \n Dracular framework works out better for you .""")
    about_label.place(x=50, y=50 )
    exit_abt = Button(aboutdracula, text="Minimize", bg="skyblue",  command= aboutdracula.destroy)
    exit_abt.place(x=700, y=450)
    aboutdracula.place(anchor='c', rely=0.5, relx=0.5)

    
import thedraculaserver        
def open_server():
    os.system("python3 /home/poltech/Downloads/tools/thedraculaserver.py")

from threading import Thread
from time import sleep
import socket
import pywhatkit 

def search():
    try:
        pywhatkit.search(ip_ad.get())
        logs_scrolled_text.insert(END, "\n")
        logs_scrolled_text.insert(END, "Opening Browser..... Please Wait.", "\n")
        logs_scrolled_text.insert(END, "\n")
        logs_scrolled_text.insert(END, "Searching on Google............", "\n")
        logs_scrolled_text.insert(END, "\n")
        
    except:
        print("Unknown Error Occurred") 
        logs_scrolled_text.insert(END, "Hostname could not be resolved.", "\n")




import dns 
import dns.resolver 

def mx():
    result = dns.resolver.resolve(ip_ad.get(), 'MX')

    for exdata in result:
        logs_scrolled_text.insert(END,"MX RECORD FOR:", "\n")
        logs_scrolled_text.insert(END, 'MX Record:' "\n")
        logs_scrolled_text.insert(END, exdata)







my_entry = Label(pentester , text= "WELCOME TO DRACULA FRAMEWORK" , bg= '#728FCE' , font = myfont)
my_entry.place(x=350, y= 250)


r1 = Radiobutton(pentester,value="Attacks", text = "Attacks", variable =radiobtn_variable,  bg='#728FCE')
r1.place(x = 550 ,y = 300)
r2 = Radiobutton(pentester, value="Cracking", text="Cracking",  variable= radiobtn_variable , bg='#728FCE')
r2.place(x= 550 , y= 350)
r3 = Radiobutton( pentester , value= "OSINT", text= "OSINT",  variable = radiobtn_variable, bg='#728FCE' )
r3.place(x= 550, y = 400 )
r4 = Radiobutton(pentester , value= "Spamming",text = "SPAMMING",variable = radiobtn_variable, bg='#728FCE')
r4.place(x=550, y= 450)


continue_btn= Button(pentester , text = "CONTINUE", fg= "black", bg="blue" ,font=font2 , command = check)
continue_btn.place(x=550 , y = 500)
homepage.place(anchor='c', rely=0.5, relx=0.5 )
pentester.mainloop()